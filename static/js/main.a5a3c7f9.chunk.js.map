{"version":3,"sources":["components/StandardSystemForm.js","components/MetricSystemForm.js","App.js","reportWebVitals.js","index.js"],"names":["StandardSystemForm","setBmiAndMessage","useState","weightInPounds","setWeightInPounds","heightInFeets","setHeightInFeets","heightInInches","setHeightInInches","Form","onSubmit","event","preventDefault","totalHeightInInches","FormGroup","row","Label","htmlFor","sm","className","Col","Input","id","name","type","value","onChange","e","target","valueAsNumber","min","max","required","offset","size","Button","block","color","MetricSystemForm","weightInKg","setWeightInKg","heightInCentimeters","setHeightInCentimeters","heightInMeters","App","measurementSystem","setMeasurementSystem","bmi","setBmi","message","setMessage","userState","setUserState","bmiValue","toFixed","Jumbotron","fluid","Container","Row","xs","Card","CardHeader","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5a3c7f9.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Col, Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nfunction StandardSystemForm({ setBmiAndMessage }) {\r\n  const [weightInPounds, setWeightInPounds] = useState();\r\n  const [heightInFeets, setHeightInFeets] = useState();\r\n  const [heightInInches, setHeightInInches] = useState();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let totalHeightInInches = heightInFeets * 12 + heightInInches;\r\n    let totalHeightInInchesSquared = totalHeightInInches * totalHeightInInches;\r\n    let bmiValue = (weightInPounds / totalHeightInInchesSquared) * 703;\r\n    setBmiAndMessage(bmiValue);\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormGroup row>\r\n        <Label htmlFor=\"weightInPounds\" sm=\"3\">\r\n          <span className=\"fas fa-weight\" /> Your Weight (In Pounds) :\r\n        </Label>\r\n        <Col sm=\"9\">\r\n          <Input\r\n            id=\"weightInPounds\"\r\n            name=\"weightInPounds\"\r\n            type=\"number\"\r\n            value={weightInPounds || \"\"}\r\n            onChange={(e) => setWeightInPounds(e.target.valueAsNumber)}\r\n            min=\"0\"\r\n            max=\"2205\" // Nearly 1000 Kg\r\n            required\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row className=\"\">\r\n        <Label sm=\"3\">\r\n          <span className=\"fas fa-child\" />\r\n          <span className=\"fas fa-arrows-alt-v\" /> Your Height :\r\n        </Label>\r\n        <Col sm=\"3\">\r\n          <Input\r\n            id=\"heightInFeets\"\r\n            name=\"heightInFeets\"\r\n            type=\"number\"\r\n            value={heightInFeets || \"\"}\r\n            onChange={(e) => setHeightInFeets(e.target.valueAsNumber)}\r\n            min=\"0\"\r\n            max=\"9\" // Combined With Inches Field Results In Max 10 Feet\r\n            required\r\n          />\r\n        </Col>\r\n        <Label htmlFor=\"heightInFeets\" sm=\"1\">\r\n          (Feet)\r\n        </Label>\r\n        <Col sm={{ offset: \"1\", size: \"3\" }}>\r\n          <Input\r\n            id=\"heightInInches\"\r\n            name=\"heightInInches\"\r\n            type=\"number\"\r\n            value={heightInInches || \"\"}\r\n            onChange={(e) => setHeightInInches(e.target.valueAsNumber)}\r\n            min=\"0\"\r\n            max=\"12\" // Combined With Feet Field Results In Max 10 Feet\r\n            required\r\n          />\r\n        </Col>\r\n        <Label htmlFor=\"heightInInches\" sm=\"1\">\r\n          (Inches)\r\n        </Label>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n        <Col sm={{ offset: \"3\", size: \"9\" }}>\r\n          <Button block color=\"primary\">\r\n            Check BMI\r\n          </Button>\r\n        </Col>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default StandardSystemForm;\r\n","import { useState } from \"react\";\r\nimport { Col, Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nfunction MetricSystemForm({ setBmiAndMessage }) {\r\n  const [weightInKg, setWeightInKg] = useState();\r\n  const [heightInCentimeters, setHeightInCentimeters] = useState();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let heightInMeters = heightInCentimeters / 100;\r\n    let heighInMetersSquared = heightInMeters * heightInMeters;\r\n    let bmiValue = weightInKg / heighInMetersSquared;\r\n    setBmiAndMessage(bmiValue);\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormGroup row>\r\n        <Label htmlFor=\"weightInKg\" sm=\"3\">\r\n          <span className=\"fas fa-weight\" /> Your Weight (In Kilograms) :\r\n        </Label>\r\n        <Col sm=\"9\">\r\n          <Input\r\n            id=\"weightInKg\"\r\n            name=\"weightInKg\"\r\n            type=\"number\"\r\n            value={weightInKg || \"\"}\r\n            onChange={(e) => setWeightInKg(e.target.valueAsNumber)}\r\n            min=\"0\"\r\n            max=\"1000\"\r\n            required\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n        <Label htmlFor=\"heightInCentimeters\" sm=\"3\">\r\n          <span>\r\n            <span className=\"fas fa-child\" />\r\n            <span className=\"fas fa-arrows-alt-v\" />\r\n          </span>{\" \"}\r\n          Your Height (In Centimeters) :\r\n        </Label>\r\n        <Col sm=\"9\">\r\n          <Input\r\n            id=\"heightInCentimeters\"\r\n            name=\"heightInCentimeters\"\r\n            type=\"number\"\r\n            value={heightInCentimeters || \"\"}\r\n            onChange={(e) => setHeightInCentimeters(e.target.valueAsNumber)}\r\n            min=\"0\"\r\n            max=\"305\" // Nearly 10 Feet\r\n            required\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n        <Col sm={{ offset: \"3\", size: \"9\" }}>\r\n          <Button block color=\"primary\">\r\n            Check BMI\r\n          </Button>\r\n        </Col>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default MetricSystemForm;\r\n","import { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Jumbotron,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport StandardSystemForm from \"./components/StandardSystemForm\";\r\nimport MetricSystemForm from \"./components/MetricSystemForm\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [measurementSystem, setMeasurementSystem] = useState(\"Standard\");\r\n  const [bmi, setBmi] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [userState, setUserState] = useState(\"\");\r\n\r\n  const setBmiAndMessage = (bmiValue) => {\r\n    if (bmiValue < 18.5) {\r\n      setMessage(\"You are under weight !\");\r\n      setUserState(\"underweight\");\r\n    } else if (bmiValue >= 18.5 && bmiValue <= 24.9) {\r\n      setMessage(\"You are in a healthy weight range !\");\r\n      setUserState(\"healthy\");\r\n    } else if (bmiValue >= 25 && bmiValue <= 29.9) {\r\n      setMessage(\"You are overweight !\");\r\n      setUserState(\"overweight\");\r\n    } else if (bmiValue >= 30) {\r\n      setMessage(\"You are obese !\");\r\n      setUserState(\"obese\");\r\n    }\r\n    setBmi(bmiValue.toFixed(1));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Jumbotron fluid className=\"bg-primary p-5\">\r\n        <Container>\r\n          <Row>\r\n            <Col xs=\"12\">\r\n              <p className=\"text-light text-center h2 \">\r\n                <span className=\"fas fa-calculator\" /> BMI Calculator\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container fluid className=\"pb-5\">\r\n        <Row className=\"p-3 text-center\">\r\n          <Col xs=\"12\">\r\n            <FormGroup row>\r\n              <Label htmlFor=\"measurementSystem\" sm=\"3\">\r\n                <span className=\"fas fa-balance-scale\" /> Measurement System :\r\n              </Label>\r\n              <Col sm=\"9\">\r\n                <Input\r\n                  type=\"select\"\r\n                  id=\"measurementSystem\"\r\n                  name=\"measurementSystem\"\r\n                  value={measurementSystem}\r\n                  onChange={(e) => setMeasurementSystem(e.target.value)}\r\n                >\r\n                  <option value=\"Standard\">Standard</option>\r\n                  <option value=\"Metric\">Metric</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n            {measurementSystem === \"Standard\" ? (\r\n              <StandardSystemForm setBmiAndMessage={setBmiAndMessage} />\r\n            ) : (\r\n              <MetricSystemForm setBmiAndMessage={setBmiAndMessage} />\r\n            )}\r\n          </Col>\r\n          <Col sm={{ offset: \"3\", size: \"9\" }}>\r\n            {/* Under Weight Card */}\r\n            {bmi && userState === \"underweight\" && (\r\n              <Card color=\"danger\" className=\"rounded-0\">\r\n                <CardHeader>\r\n                  <span className=\"text-light h5\">\r\n                    Your BMI Is: {bmi}{\" \"}\r\n                    <span className=\"fas fa-balance-scale-left\" />\r\n                  </span>\r\n                </CardHeader>\r\n                <CardBody className=\"bg-light\">\r\n                  <span className=\"text-danger h5\">\r\n                    {message} <span className=\"fas fa-frown\" />\r\n                  </span>\r\n                </CardBody>\r\n              </Card>\r\n            )}\r\n            {/* Helathy Weight Card */}\r\n            {bmi && userState === \"healthy\" && (\r\n              <Card color=\"success\" className=\"rounded-0\">\r\n                <CardHeader>\r\n                  <span className=\"text-light h5\">\r\n                    Your BMI Is: {bmi} <span className=\"fas fa-balance-scale\" />\r\n                  </span>\r\n                </CardHeader>\r\n                <CardBody className=\"bg-light\">\r\n                  <span className=\"text-success h5\">\r\n                    {message} <span className=\"fas fa-smile\" />\r\n                  </span>\r\n                </CardBody>\r\n              </Card>\r\n            )}\r\n            {/* Over Weight Or Obese Card */}\r\n            {((bmi && userState === \"overweight\") || userState === \"obese\") && (\r\n              <Card color=\"danger\" className=\"rounded-0\">\r\n                <CardHeader>\r\n                  <span className=\"text-light h5\">\r\n                    Your BMI Is: {bmi}{\" \"}\r\n                    <span className=\"fas fa-balance-scale-right \" />\r\n                  </span>\r\n                </CardHeader>\r\n                <CardBody className=\"bg-light\">\r\n                  <span className=\"text-danger h5\">\r\n                    {message} <span className=\"fas fa-frown\" />\r\n                  </span>\r\n                </CardBody>\r\n              </Card>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"bg-primary fixed-bottom\">\r\n          <Col xs=\"12\">\r\n            <p className=\"text-white text-center\">\r\n              <span className=\"far fa-smile\" /> Thanks For Using The App\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}